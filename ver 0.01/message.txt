<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI ÏòÅÏñ¥ÏÇ¨Ï†Ñ - LLM Dictionary Search</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            backdrop-filter: blur(10px);
        }

        .header {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
            text-align: center;
            padding: 40px 20px;
        }

        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        }

        .header p {
            font-size: 1.1em;
            opacity: 0.9;
        }

        .search-section {
            padding: 40px;
            border-bottom: 1px solid #e0e0e0;
        }

        .search-box {
            position: relative;
            max-width: 600px;
            margin: 0 auto;
        }

        .search-input {
            width: 100%;
            padding: 18px 60px 18px 20px;
            font-size: 18px;
            border: 2px solid #e0e0e0;
            border-radius: 50px;
            outline: none;
            transition: all 0.3s ease;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
        }

        .search-input:focus {
            border-color: #4facfe;
            box-shadow: 0 4px 20px rgba(79, 172, 254, 0.2);
        }

        .search-btn {
            position: absolute;
            right: 8px;
            top: 50%;
            transform: translateY(-50%);
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            border: none;
            border-radius: 50%;
            width: 44px;
            height: 44px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .search-btn:hover {
            transform: translateY(-50%) scale(1.1);
            box-shadow: 0 4px 15px rgba(79, 172, 254, 0.4);
        }

        .search-btn svg {
            width: 20px;
            height: 20px;
            fill: white;
        }

        .filters {
            display: flex;
            gap: 20px;
            margin-top: 20px;
            flex-wrap: wrap;
            justify-content: center;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 5px;
        }

        .filter-group label {
            font-size: 14px;
            color: #666;
            font-weight: 500;
        }

        .filter-select {
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 14px;
            background: white;
            cursor: pointer;
        }

        .stats {
            display: flex;
            justify-content: center;
            gap: 40px;
            padding: 20px;
            background: #f8f9fa;
            flex-wrap: wrap;
        }

        .stat-item {
            text-align: center;
        }

        .stat-number {
            font-size: 2em;
            font-weight: bold;
            color: #4facfe;
        }

        .stat-label {
            font-size: 14px;
            color: #666;
            margin-top: 5px;
        }

        .results {
            padding: 20px 40px 40px;
        }

        .result-item {
            background: white;
            border: 1px solid #e0e0e0;
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 20px;
            transition: all 0.3s ease;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        }

        .result-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
            border-color: #4facfe;
        }

        .word-header {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-bottom: 15px;
            flex-wrap: wrap;
        }

        .word-title {
            font-size: 2em;
            font-weight: bold;
            color: #333;
        }

        .pos-tag {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 500;
        }

        .word-meta {
            display: flex;
            gap: 15px;
            align-items: center;
            flex-wrap: wrap;
        }

        .meta-badge {
            background: #f0f2f5;
            padding: 4px 10px;
            border-radius: 12px;
            font-size: 12px;
            color: #666;
        }

        .score-high { background: #d4edda; color: #155724; }
        .score-medium { background: #fff3cd; color: #856404; }
        .score-low { background: #f8d7da; color: #721c24; }

        .definition {
            font-size: 16px;
            color: #333;
            margin: 15px 0;
            line-height: 1.6;
            font-weight: 500;
        }

        .example {
            background: #f8f9fa;
            padding: 15px;
            border-left: 4px solid #4facfe;
            border-radius: 8px;
            font-style: italic;
            color: #555;
            margin-top: 15px;
        }

        .no-results {
            text-align: center;
            padding: 60px 20px;
            color: #666;
        }

        .no-results-icon {
            font-size: 4em;
            margin-bottom: 20px;
            opacity: 0.3;
        }

        .loading {
            text-align: center;
            padding: 40px;
            color: #666;
        }

        .loading-spinner {
            display: inline-block;
            width: 40px;
            height: 40px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid #4facfe;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-bottom: 15px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .suggestion {
            background: #e3f2fd;
            border: 1px solid #bbdefb;
            border-radius: 10px;
            padding: 15px;
            margin: 20px 0;
            text-align: center;
        }

        .suggestion-word {
            color: #1976d2;
            font-weight: bold;
            cursor: pointer;
            margin: 0 5px;
            text-decoration: underline;
        }

        .suggestion-word:hover {
            color: #0d47a1;
        }

        @media (max-width: 768px) {
            .header h1 {
                font-size: 2em;
            }

            .search-section {
                padding: 20px;
            }

            .results {
                padding: 20px;
            }

            .stats {
                gap: 20px;
            }

            .word-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 10px;
            }

            .word-title {
                font-size: 1.5em;
            }
        }
    </style>
</head>
<body>
<div class="container">
    <div class="header">
        <h1>ü§ñ AI ÏòÅÏñ¥ÏÇ¨Ï†Ñ</h1>
        <p>LLMÏúºÎ°ú ÏÉùÏÑ±Ìïú 4,869Í∞ú Îã®Ïñ¥Ïùò Í≥†ÌíàÏßà ÏòÅÏñ¥ÏÇ¨Ï†Ñ</p>
    </div>

    <div class="search-section">
        <div class="search-box">
            <input type="text" id="searchInput" class="search-input" placeholder="ÏòÅÏñ¥ Îã®Ïñ¥Î•º Í≤ÄÏÉâÌïòÏÑ∏Ïöî..." autocomplete="off">
            <button id="searchBtn" class="search-btn">
                <svg viewBox="0 0 24 24">
                    <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
                </svg>
            </button>
        </div>

        <div class="filters">
            <div class="filter-group">
                <label>ÌíàÏÇ¨</label>
                <select id="posFilter" class="filter-select">
                    <option value="">Ï†ÑÏ≤¥</option>
                    <option value="noun">Î™ÖÏÇ¨</option>
                    <option value="verb">ÎèôÏÇ¨</option>
                    <option value="adjective">ÌòïÏö©ÏÇ¨</option>
                    <option value="adverb">Î∂ÄÏÇ¨</option>
                    <option value="other">Í∏∞ÌÉÄ</option>
                </select>
            </div>
            <div class="filter-group">
                <label>Îã®Ïñ¥ Í∏∏Ïù¥</label>
                <select id="lengthFilter" class="filter-select">
                    <option value="">Ï†ÑÏ≤¥</option>
                    <option value="3-4">3-4Í∏ÄÏûê</option>
                    <option value="5-6">5-6Í∏ÄÏûê</option>
                    <option value="7-8">7-8Í∏ÄÏûê</option>
                    <option value="9+">9Í∏ÄÏûê Ïù¥ÏÉÅ</option>
                </select>
            </div>
            <div class="filter-group">
                <label>Ìù¨Í∑ÄÎèÑ</label>
                <select id="rarityFilter" class="filter-select">
                    <option value="">Ï†ÑÏ≤¥</option>
                    <option value="1">Îß§Ïö∞ ÌùîÌï®</option>
                    <option value="2">ÌùîÌï®</option>
                    <option value="3">Î≥¥ÌÜµ</option>
                    <option value="4+">Ìù¨Í∑Ä</option>
                </select>
            </div>
        </div>
    </div>

    <div class="stats">
        <div class="stat-item">
            <div class="stat-number" id="totalWords">4,869</div>
            <div class="stat-label">Ï¥ù Îã®Ïñ¥ Ïàò</div>
        </div>
        <div class="stat-item">
            <div class="stat-number" id="searchResults">0</div>
            <div class="stat-label">Í≤ÄÏÉâ Í≤∞Í≥º</div>
        </div>
        <div class="stat-item">
            <div class="stat-number" id="avgScore">0.85</div>
            <div class="stat-label">ÌèâÍ∑† Ï†êÏàò</div>
        </div>
    </div>

    <div class="results" id="results">
        <div class="no-results">
            <div class="no-results-icon">üìö</div>
            <h3>Í≤ÄÏÉâÏñ¥Î•º ÏûÖÎ†•ÌïòÏó¨ Îã®Ïñ¥Î•º Ï∞æÏïÑÎ≥¥ÏÑ∏Ïöî</h3>
            <p>ÏòÅÏñ¥ Îã®Ïñ¥ÎÇò ÌïúÍ∏Ä ÏùòÎØ∏Î°ú Í≤ÄÏÉâÌï† Ïàò ÏûàÏäµÎãàÎã§</p>
        </div>
    </div>
</div>

<script>
    // ÏÇ¨Ï†Ñ Îç∞Ïù¥ÌÑ∞Î•º Ï†ÄÏû•Ìï† Î≥ÄÏàò
    let dictionaryData = [];
    let currentResults = [];

    // ÌååÏùº ÏóÖÎ°úÎìú Ìï®Ïàò
    window.loadDictionaryFile = function() {
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = '.json';
        input.onchange = function(e) {
            const file = e.target.files[0];
            if (file) {
                console.log('ÌååÏùº ÏÑ†ÌÉùÎê®:', file.name, file.size, 'bytes');
                const reader = new FileReader();
                reader.onload = function(e) {
                    try {
                        console.log('ÌååÏùº ÏùΩÍ∏∞ ÏôÑÎ£å, ÌÅ¨Í∏∞:', e.target.result.length);
                        const data = JSON.parse(e.target.result);
                        console.log('JSON ÌååÏã± ÏôÑÎ£å, Íµ¨Ï°∞:', Object.keys(data));

                        // Ïã§Ï†ú Îã®Ïñ¥ Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú
                        let loadedWords = [];

                        if (data.entries && Array.isArray(data.entries)) {
                            loadedWords = data.entries;
                            console.log('entriesÏóêÏÑú Î°úÎìú:', loadedWords.length, 'Í∞ú');
                        } else if (data.words && Array.isArray(data.words)) {
                            loadedWords = data.words;
                            console.log('wordsÏóêÏÑú Î°úÎìú:', loadedWords.length, 'Í∞ú');
                        } else if (Array.isArray(data)) {
                            loadedWords = data;
                            console.log('Î∞∞Ïó¥ÏóêÏÑú Î°úÎìú:', loadedWords.length, 'Í∞ú');
                        } else {
                            console.error('ÏßÄÏõêÌïòÏßÄ ÏïäÎäî JSON Íµ¨Ï°∞:', data);
                            showMessage('ÏßÄÏõêÌïòÏßÄ ÏïäÎäî ÌååÏùº Íµ¨Ï°∞ÏûÖÎãàÎã§.', 'error');
                            return;
                        }

                        if (loadedWords.length === 0) {
                            console.error('Îã®Ïñ¥ Îç∞Ïù¥ÌÑ∞Í∞Ä ÎπÑÏñ¥ÏûàÏäµÎãàÎã§');
                            showMessage('Îã®Ïñ¥ Îç∞Ïù¥ÌÑ∞Í∞Ä ÎπÑÏñ¥ÏûàÏäµÎãàÎã§.', 'error');
                            return;
                        }

                        // Ï†ÑÏó≠ Î≥ÄÏàòÏóê Ìï†Îãπ (ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ Ï†úÍ±∞)
                        dictionaryData = loadedWords;
                        console.log('Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏôÑÎ£å:', dictionaryData.length, 'Í∞ú');

                        // Ï≤´ Î≤àÏß∏ Ìï≠Î™© ÏÉòÌîå Ï∂úÎ†•
                        if (dictionaryData.length > 0) {
                            console.log('Ï≤´ Î≤àÏß∏ Îã®Ïñ¥ ÏÉòÌîå:', dictionaryData[0]);
                            console.log('ÎßàÏßÄÎßâ Îã®Ïñ¥ ÏÉòÌîå:', dictionaryData[dictionaryData.length - 1]);
                        }

                        updateStats();
                        showMessage(`ÏÇ¨Ï†Ñ ÌååÏùºÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î°úÎìúÎêòÏóàÏäµÎãàÎã§! (${dictionaryData.length}Í∞ú Îã®Ïñ¥)`, 'success');

                        // Î°úÎìú ÌõÑ Í∏∞Î≥∏ ÌôîÎ©¥ÏúºÎ°ú Ï†ÑÌôò
                        document.getElementById('results').innerHTML = `
                                <div class="no-results">
                                    <div class="no-results-icon">üìö</div>
                                    <h3>Í≤ÄÏÉâÏñ¥Î•º ÏûÖÎ†•ÌïòÏó¨ Îã®Ïñ¥Î•º Ï∞æÏïÑÎ≥¥ÏÑ∏Ïöî</h3>
                                    <p>ÏòÅÏñ¥ Îã®Ïñ¥ÎÇò ÌïúÍ∏Ä ÏùòÎØ∏Î°ú Í≤ÄÏÉâÌï† Ïàò ÏûàÏäµÎãàÎã§</p>
                                    <p style="margin-top: 10px; color: #666; font-size: 14px;">
                                        Ï¥ù ${dictionaryData.length}Í∞ú Îã®Ïñ¥Í∞Ä Î°úÎìúÎêòÏóàÏäµÎãàÎã§
                                    </p>
                                </div>
                            `;

                    } catch (error) {
                        console.error('JSON ÌååÏã± ÏóêÎü¨:', error);
                        showMessage('ÌååÏùº ÌòïÏãùÏù¥ Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§: ' + error.message, 'error');
                    }
                };
                reader.onerror = function(e) {
                    console.error('ÌååÏùº ÏùΩÍ∏∞ ÏóêÎü¨:', e);
                    showMessage('ÌååÏùºÏùÑ ÏùΩÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.', 'error');
                };
                reader.readAsText(file);
            }
        };
        input.click();
    };

    // Î©îÏãúÏßÄ ÌëúÏãú Ìï®Ïàò
    function showMessage(text, type) {
        const suggestion = document.createElement('div');
        suggestion.className = 'suggestion';
        suggestion.style.background = type === 'error' ? '#ffebee' : '#e8f5e8';
        suggestion.style.borderColor = type === 'error' ? '#ffcdd2' : '#c8e6c8';
        suggestion.innerHTML = text;

        const results = document.getElementById('results');
        results.insertBefore(suggestion, results.firstChild);

        setTimeout(() => suggestion.remove(), 3000);
    }

    // ÏÑúÎ≤ÑÏóêÏÑú JSON ÌååÏùº ÏûêÎèô Î°úÎìú
    window.loadFromServer = function() {
        const fileName = 'llm_dictionary_2letter_20250812_000751.json';
        console.log('ÏÑúÎ≤ÑÏóêÏÑú ÌååÏùº Î°úÎìú ÏãúÎèÑ:', fileName);

        showMessage('ÏÑúÎ≤ÑÏóêÏÑú ÏÇ¨Ï†Ñ ÌååÏùºÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë...', 'info');

        fetch(fileName)
            .then(response => {
                console.log('ÏùëÎãµ ÏÉÅÌÉú:', response.status, response.statusText);
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('JSON ÌååÏã± ÏôÑÎ£å, Íµ¨Ï°∞:', Object.keys(data));

                let loadedWords = [];
                if (data.entries && Array.isArray(data.entries)) {
                    loadedWords = data.entries;
                    console.log('entriesÏóêÏÑú Î°úÎìú:', loadedWords.length, 'Í∞ú');
                } else if (data.words && Array.isArray(data.words)) {
                    loadedWords = data.words;
                    console.log('wordsÏóêÏÑú Î°úÎìú:', loadedWords.length, 'Í∞ú');
                } else if (Array.isArray(data)) {
                    loadedWords = data;
                    console.log('Î∞∞Ïó¥ÏóêÏÑú Î°úÎìú:', loadedWords.length, 'Í∞ú');
                } else {
                    throw new Error('ÏßÄÏõêÌïòÏßÄ ÏïäÎäî JSON Íµ¨Ï°∞ÏûÖÎãàÎã§');
                }

                if (loadedWords.length === 0) {
                    throw new Error('Îã®Ïñ¥ Îç∞Ïù¥ÌÑ∞Í∞Ä ÎπÑÏñ¥ÏûàÏäµÎãàÎã§');
                }

                dictionaryData = loadedWords;
                console.log('ÏÑúÎ≤ÑÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏôÑÎ£å:', dictionaryData.length, 'Í∞ú');

                if (dictionaryData.length > 0) {
                    console.log('Ï≤´ Î≤àÏß∏ Îã®Ïñ¥:', dictionaryData[0]);
                    console.log('ÎßàÏßÄÎßâ Îã®Ïñ¥:', dictionaryData[dictionaryData.length - 1]);
                }

                updateStats();
                showMessage(`üéâ ÏÑúÎ≤ÑÏóêÏÑú ${loadedWords.length}Í∞ú Îã®Ïñ¥Î•º ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î°úÎìúÌñàÏäµÎãàÎã§!`, 'success');

                document.getElementById('results').innerHTML = `
                        <div class="no-results">
                            <div class="no-results-icon">üìö</div>
                            <h3>Í≤ÄÏÉâÏñ¥Î•º ÏûÖÎ†•ÌïòÏó¨ Îã®Ïñ¥Î•º Ï∞æÏïÑÎ≥¥ÏÑ∏Ïöî</h3>
                            <p>ÏòÅÏñ¥ Îã®Ïñ¥ÎÇò ÌïúÍ∏Ä ÏùòÎØ∏Î°ú Í≤ÄÏÉâÌï† Ïàò ÏûàÏäµÎãàÎã§</p>
                            <p style="margin-top: 10px; color: #666; font-size: 14px;">
                                ÏÑúÎ≤ÑÏóêÏÑú ${dictionaryData.length}Í∞ú Îã®Ïñ¥Í∞Ä Î°úÎìúÎêòÏóàÏäµÎãàÎã§
                            </p>
                        </div>
                    `;
            })
            .catch(error => {
                console.error('ÏÑúÎ≤Ñ Î°úÎìú Ïã§Ìå®:', error);
                let errorMsg = 'ÏÑúÎ≤ÑÏóêÏÑú ÌååÏùºÏùÑ Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§';

                if (error.message.includes('HTTP 404')) {
                    errorMsg += ' (ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏùå)';
                } else if (error.message.includes('CORS')) {
                    errorMsg += ' (CORS Ï†ïÏ±Ö Ïò§Î•ò)';
                } else if (error.message.includes('JSON')) {
                    errorMsg += ' (JSON ÌòïÏãù Ïò§Î•ò)';
                }

                showMessage(errorMsg + ': ' + error.message, 'error');
            });
    };
    window.loadFromText = function() {
        const textarea = document.createElement('textarea');
        textarea.style.cssText = `
                position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
                width: 80%; height: 60%; z-index: 10000; background: white;
                border: 2px solid #4facfe; border-radius: 10px; padding: 20px;
                font-family: monospace; font-size: 12px;
            `;
        textarea.placeholder = 'JSON ÌååÏùº ÎÇ¥Ïö©ÏùÑ Ïó¨Í∏∞Ïóê Î∂ôÏó¨ÎÑ£Í∏∞...';

        const overlay = document.createElement('div');
        overlay.style.cssText = `
                position: fixed; top: 0; left: 0; width: 100%; height: 100%;
                background: rgba(0,0,0,0.7); z-index: 9999;
            `;

        const closeBtn = document.createElement('button');
        closeBtn.textContent = 'Ï∑®ÏÜå';
        closeBtn.style.cssText = `
                position: absolute; top: 10px; right: 60px;
                background: #ff4757; color: white; border: none;
                padding: 8px 16px; border-radius: 5px; cursor: pointer;
            `;

        const loadBtn = document.createElement('button');
        loadBtn.textContent = 'Î°úÎìú';
        loadBtn.style.cssText = `
                position: absolute; top: 10px; right: 10px;
                background: #4facfe; color: white; border: none;
                padding: 8px 16px; border-radius: 5px; cursor: pointer;
            `;

        closeBtn.onclick = () => document.body.removeChild(overlay);
        loadBtn.onclick = () => {
            try {
                const data = JSON.parse(textarea.value);
                let loadedWords = data.entries || data.words || (Array.isArray(data) ? data : []);

                if (loadedWords.length === 0) {
                    alert('Îã®Ïñ¥ Îç∞Ïù¥ÌÑ∞Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
                    return;
                }

                dictionaryData = loadedWords;
                updateStats();
                showMessage(`${loadedWords.length}Í∞ú Îã®Ïñ¥ Î°úÎìú ÏÑ±Í≥µ!`, 'success');
                document.body.removeChild(overlay);

                document.getElementById('results').innerHTML = `
                        <div class="no-results">
                            <div class="no-results-icon">üìö</div>
                            <h3>Í≤ÄÏÉâÏñ¥Î•º ÏûÖÎ†•ÌïòÏó¨ Îã®Ïñ¥Î•º Ï∞æÏïÑÎ≥¥ÏÑ∏Ïöî</h3>
                            <p>Ï¥ù ${dictionaryData.length}Í∞ú Îã®Ïñ¥Í∞Ä Î°úÎìúÎêòÏóàÏäµÎãàÎã§</p>
                        </div>
                    `;

            } catch (e) {
                alert('JSON ÌòïÏãùÏù¥ Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§: ' + e.message);
            }
        };

        textarea.appendChild(closeBtn);
        textarea.appendChild(loadBtn);
        overlay.appendChild(textarea);
        document.body.appendChild(overlay);
    };

    // ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
    function updateStats() {
        document.getElementById('totalWords').textContent = dictionaryData.length.toLocaleString();
        document.getElementById('searchResults').textContent = currentResults.length.toLocaleString();

        if (dictionaryData.length > 0) {
            const avgScore = dictionaryData.reduce((sum, word) => sum + (word.score || 0), 0) / dictionaryData.length;
            document.getElementById('avgScore').textContent = avgScore.toFixed(2);
        }
    }

    // Í≤ÄÏÉâ Ìï®Ïàò
    function search() {
        const query = document.getElementById('searchInput').value.trim().toLowerCase();
        const posFilter = document.getElementById('posFilter').value;
        const lengthFilter = document.getElementById('lengthFilter').value;
        const rarityFilter = document.getElementById('rarityFilter').value;

        console.log('Í≤ÄÏÉâ ÏãúÏûë:', {query, posFilter, lengthFilter, rarityFilter, totalWords: dictionaryData.length});

        if (!query) {
            displayResults([]);
            return;
        }

        if (dictionaryData.length === 0) {
            showMessage('ÏÇ¨Ï†Ñ Îç∞Ïù¥ÌÑ∞Í∞Ä Î°úÎìúÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. JSON ÌååÏùºÏùÑ Î®ºÏ†Ä ÏóÖÎ°úÎìúÌï¥Ï£ºÏÑ∏Ïöî.', 'error');
            return;
        }

        // Î°úÎî© ÌëúÏãú
        showLoading();

        setTimeout(() => {
            let results = dictionaryData.filter(word => {
                // ÌÖçÏä§Ìä∏ Í≤ÄÏÉâ (Îã®Ïñ¥, Ï†ïÏùò, ÏòàÎ¨∏ÏóêÏÑú)
                const matchesText = word.word.toLowerCase().includes(query) ||
                    (word.definition && word.definition.toLowerCase().includes(query)) ||
                    (word.example && word.example.toLowerCase().includes(query));

                // ÌïÑÌÑ∞ Ï°∞Í±¥ ÌôïÏù∏
                const matchesPos = !posFilter || word.pos === posFilter;

                const matchesLength = !lengthFilter || (() => {
                    const len = word.length || word.word.length;
                    switch(lengthFilter) {
                        case '3-4': return len >= 3 && len <= 4;
                        case '5-6': return len >= 5 && len <= 6;
                        case '7-8': return len >= 7 && len <= 8;
                        case '9+': return len >= 9;
                        default: return true;
                    }
                })();

                const matchesRarity = !rarityFilter || (() => {
                    const rarity = word.rarity || 3;
                    if (rarityFilter === '4+') return rarity >= 4;
                    return rarity === parseInt(rarityFilter);
                })();

                return matchesText && matchesPos && matchesLength && matchesRarity;
            });

            console.log('Í≤ÄÏÉâ Í≤∞Í≥º:', results.length, 'Í∞ú');
            if (results.length > 0) {
                console.log('Ï≤´ Î≤àÏß∏ Í≤∞Í≥º:', results[0]);
            }

            // Ï†êÏàòÏôÄ Í¥ÄÎ†®ÏÑ±ÏúºÎ°ú Ï†ïÎ†¨
            results.sort((a, b) => {
                // ÏôÑÏ†Ñ ÏùºÏπòÍ∞Ä Ïö∞ÏÑ†
                const aExact = a.word.toLowerCase() === query;
                const bExact = b.word.toLowerCase() === query;
                if (aExact && !bExact) return -1;
                if (!aExact && bExact) return 1;

                // Îã®Ïñ¥ ÏãúÏûë Î∂ÄÎ∂Ñ ÏùºÏπòÍ∞Ä Îã§Ïùå Ïö∞ÏÑ†ÏàúÏúÑ
                const aStarts = a.word.toLowerCase().startsWith(query);
                const bStarts = b.word.toLowerCase().startsWith(query);
                if (aStarts && !bStarts) return -1;
                if (!aStarts && bStarts) return 1;

                // Í∑∏Îã§ÏùåÏùÄ Ï†êÏàòÏàú
                return (b.score || 0) - (a.score || 0);
            });

            currentResults = results;
            displayResults(results.slice(0, 50)); // ÏµúÎåÄ 50Í∞ú Í≤∞Í≥ºÎßå ÌëúÏãú
            updateStats();

            // Í≤ÄÏÉâ Ï†úÏïà
            if (results.length === 0) {
                showSuggestions(query);
            }
        }, 100);
    }

    // Î°úÎî© ÌëúÏãú
    function showLoading() {
        document.getElementById('results').innerHTML = `
                <div class="loading">
                    <div class="loading-spinner"></div>
                    <p>Í≤ÄÏÉâ Ï§ë...</p>
                </div>
            `;
    }

    // Í≤ÄÏÉâ Ï†úÏïà
    function showSuggestions(query) {
        const suggestions = dictionaryData
            .filter(word => {
                const similarity = getSimilarity(query, word.word.toLowerCase());
                return similarity > 0.4;
            })
            .sort((a, b) => getSimilarity(query, b.word.toLowerCase()) - getSimilarity(query, a.word.toLowerCase()))
            .slice(0, 5)
            .map(word => word.word);

        if (suggestions.length > 0) {
            const suggestionDiv = document.createElement('div');
            suggestionDiv.className = 'suggestion';
            suggestionDiv.innerHTML = `
                    <p><strong>Ïù¥Îü∞ Îã®Ïñ¥Î•º Ï∞æÏúºÏãúÎÇòÏöî?</strong></p>
                    ${suggestions.map(word => `<span class="suggestion-word" onclick="searchWord('${word}')">${word}</span>`).join('')}
                `;
            document.getElementById('results').appendChild(suggestionDiv);
        }
    }

    // Î¨∏ÏûêÏó¥ Ïú†ÏÇ¨ÎèÑ Í≥ÑÏÇ∞ (Í∞ÑÎã®Ìïú Î≤ÑÏ†Ñ)
    function getSimilarity(str1, str2) {
        const longer = str1.length > str2.length ? str1 : str2;
        const shorter = str1.length > str2.length ? str2 : str1;

        if (longer.length === 0) return 1.0;

        return (longer.length - editDistance(longer, shorter)) / longer.length;
    }

    // Ìé∏Ïßë Í±∞Î¶¨ Í≥ÑÏÇ∞
    function editDistance(str1, str2) {
        const matrix = [];
        for (let i = 0; i <= str2.length; i++) {
            matrix[i] = [i];
        }
        for (let j = 0; j <= str1.length; j++) {
            matrix[0][j] = j;
        }
        for (let i = 1; i <= str2.length; i++) {
            for (let j = 1; j <= str1.length; j++) {
                if (str2.charAt(i - 1) === str1.charAt(j - 1)) {
                    matrix[i][j] = matrix[i - 1][j - 1];
                } else {
                    matrix[i][j] = Math.min(
                        matrix[i - 1][j - 1] + 1,
                        matrix[i][j - 1] + 1,
                        matrix[i - 1][j] + 1
                    );
                }
            }
        }
        return matrix[str2.length][str1.length];
    }

    // Ï†úÏïàÎêú Îã®Ïñ¥Î°ú Í≤ÄÏÉâ
    window.searchWord = function(word) {
        document.getElementById('searchInput').value = word;
        search();
    };

    // Í≤∞Í≥º ÌëúÏãú
    function displayResults(results) {
        const resultsContainer = document.getElementById('results');

        if (results.length === 0) {
            resultsContainer.innerHTML = `
                    <div class="no-results">
                        <div class="no-results-icon">üîç</div>
                        <h3>Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§</h3>
                        <p>Îã§Î•∏ Í≤ÄÏÉâÏñ¥Î•º ÏãúÎèÑÌï¥Î≥¥ÏÑ∏Ïöî</p>
                    </div>
                `;
            return;
        }

        resultsContainer.innerHTML = results.map(word => {
            const scoreClass = word.score >= 0.8 ? 'score-high' :
                word.score >= 0.6 ? 'score-medium' : 'score-low';

            return `
                    <div class="result-item">
                        <div class="word-header">
                            <div class="word-title">${word.word}</div>
                            <div class="pos-tag">${word.pos || 'unknown'}</div>
                        </div>
                        <div class="word-meta">
                            <span class="meta-badge ${scoreClass}">Ï†êÏàò: ${(word.score || 0).toFixed(2)}</span>
                            <span class="meta-badge">Í∏∏Ïù¥: ${word.length || word.word.length}Í∏ÄÏûê</span>
                            <span class="meta-badge">Ìù¨Í∑ÄÎèÑ: ${word.rarity || 'N/A'}</span>
                            <span class="meta-badge">Ïã†Î¢∞ÎèÑ: ${((word.confidence || 0) * 100).toFixed(0)}%</span>
                        </div>
                        <div class="definition">${word.definition || 'Ï†ïÏùòÍ∞Ä ÏóÜÏäµÎãàÎã§'}</div>
                        ${word.example ? `<div class="example">"${word.example}"</div>` : ''}
                    </div>
                `;
        }).join('');
    }

    // Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï
    document.getElementById('searchInput').addEventListener('input', search);
    document.getElementById('searchBtn').addEventListener('click', search);
    document.getElementById('posFilter').addEventListener('change', search);
    document.getElementById('lengthFilter').addEventListener('change', search);
    document.getElementById('rarityFilter').addEventListener('change', search);

    // Enter ÌÇ§ Ï≤òÎ¶¨
    document.getElementById('searchInput').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            search();
        }
    });

    // Ï¥àÍ∏∞Ìôî Ïãú ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ÏôÄ ÌååÏùº Î°úÎìú ÏïàÎÇ¥
    window.addEventListener('load', function() {
        console.log('ÌéòÏù¥ÏßÄ Î°úÎìú ÏôÑÎ£å');

        // Îπà ÏÉÅÌÉúÎ°ú ÏãúÏûë
        dictionaryData = [];
        updateStats();

        document.getElementById('results').innerHTML = `
                <div class="no-results">
                    <div class="no-results-icon">üìÅ</div>
                    <h3>ÏÇ¨Ï†Ñ ÌååÏùºÏùÑ Î°úÎìúÌï¥Ï£ºÏÑ∏Ïöî</h3>
                    <div style="display: flex; gap: 12px; justify-content: center; margin-top: 20px; flex-wrap: wrap;">
                        <button onclick="loadFromServer()" style="
                            background: linear-gradient(135deg, #2ecc71 0%, #27ae60 100%);
                            color: white; border: none; padding: 12px 20px; border-radius: 25px;
                            cursor: pointer; font-size: 15px; transition: all 0.3s ease;
                            box-shadow: 0 4px 15px rgba(46, 204, 113, 0.3);
                        " onmouseover="this.style.transform='scale(1.05)'" onmouseout="this.style.transform='scale(1)'">
                            üöÄ ÏÑúÎ≤ÑÏóêÏÑú ÏûêÎèô Î°úÎìú
                        </button>
                        <button onclick="loadDictionaryFile()" style="
                            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
                            color: white; border: none; padding: 12px 20px; border-radius: 25px;
                            cursor: pointer; font-size: 15px; transition: all 0.3s ease;
                        " onmouseover="this.style.transform='scale(1.05)'" onmouseout="this.style.transform='scale(1)'">
                            üìÅ ÌååÏùº ÏÑ†ÌÉù
                        </button>
                        <button onclick="loadFromText()" style="
                            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                            color: white; border: none; padding: 12px 20px; border-radius: 25px;
                            cursor: pointer; font-size: 15px; transition: all 0.3s ease;
                        " onmouseover="this.style.transform='scale(1.05)'" onmouseout="this.style.transform='scale(1)'">
                            üìù ÌÖçÏä§Ìä∏ Î∂ôÏó¨ÎÑ£Í∏∞
                        </button>
                    </div>
                    <p style="margin-top: 15px; color: #888; font-size: 14px; text-align: center;">
                        <strong>üöÄ ÏÑúÎ≤ÑÏóêÏÑú ÏûêÎèô Î°úÎìú</strong>Î•º Î®ºÏ†Ä ÏãúÎèÑÌï¥Î≥¥ÏÑ∏Ïöî!<br>
                        <span style="font-size: 12px; color: #999;">
                            Í∞ôÏùÄ Ìè¥ÎçîÏùò llm_dictionary_2letter_20250812_000751.json ÌååÏùºÏùÑ ÏûêÎèôÏúºÎ°ú Î∂àÎü¨ÏòµÎãàÎã§
                        </span>
                    </p>
                </div>
            `;
    });
</script>
</body>
</html>